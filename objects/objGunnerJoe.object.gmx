<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGunnerJoe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;

grav = 0;
blockCollision = false;
facePlayerOnSpawn = true;

category = "flying, floating";

image_speed = 0.3;

moveTimer = 120;
missile = noone;

swoop = false;
rise = false;
canFlip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        moveTimer--;
        if (moveTimer == 60)
        {
            if (!instance_exists(missile))
            {
                var i = instance_create(x, y, objGunnerJoeMissile);
                if (image_index == -1)
                {
                    i.image_index = 5;
                }
                else
                {
                    i.image_index = 7;
                }
                missile = i.id;
                i.parent = id;
                i.direction = point_direction(x, y, target.x, target.y);
                playSFX(sfxMissileLaunch);
            }
        }
        if (moveTimer == 0)
        {
            moveTimer = 120;
        }
        if ((moveTimer &lt;= 60) &amp;&amp; (swoop == false))
        {
            if ((target.x &lt;= x - 50) &amp;&amp; (image_xscale == -1) || (target.x &lt;= x + 50) &amp;&amp; (image_xscale == 1))
            {
                swoop = true;
                if (canFlip == true)
                {
                    if ((target.x &gt; x) &amp;&amp; (image_xscale == -1) || (target.x &lt;= x) &amp;&amp; (image_xscale == 1))
                    {
                        image_index *= -1;
                        canFlip = false;
                    }
                }
            }
        }
        
        // Swoop down
        if (swoop == true)
        {
            if (target.y &gt; y)
            {
                xspeed = 1 * image_xscale;
                yspeed = 1;
            }
            else
            {
                rise = true;
                swoop = false;
                moveTimer = 60;
            }
        }
        
        // Rise
        if (rise == true)
        {
            moveTimer--;
            if (moveTimer != 0)
            {
                xspeed = 1 * image_xscale;
                yspeed = -1;
            }
            else
            {
                moveTimer = 120;
                xspeed = 0;
                yspeed = 0;
                rise = false;
                canFlip = true;
                
                // facePlayer = true;
            }
        }
    }
}
else if (dead)
{
    image_index = 0;
    healthpoints = healthpointsStart;
    xspeed = 0;
    yspeed = 0;
    swoop = false;
    rise = false;
    canFlip = true;
    moveTimer = 120;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
