<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprArigockG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// set this in creation code
color = global.nesPalette[18];

healthpointsStart = 3;
healthpoints = healthpointsStart;

// not confirmed
contactDamage = 3;

animTimer = 0;
phase = 0;

// time to wait before beginning to shoot
init_time = 30;

// time between shots
shoot_time = 30;

// shots per volley
volley_n = 4;

// time to wait after each volley
wait_time = 120;

// speed of shot
shot_xspeed = 1;
high_shot_yspeed = -6;
low_shot_yspeed = -4.5;

// animation slowness
at = 3;

image_speed = 0;
image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    image_blend = color;
    
    if (phase == 0)
    {
        image_index = 1;
        if (animTimer &gt; init_time)
        {
            phase = 1;
            animTimer = 0;
        }
    }
    else if (phase == volley_n + 1)
    {
        // sleep briefly
        image_index = 1;
        
        // stretch briefly:
        if ((wait_time - animTimer) &lt; at * 2)
            image_index = 2;
        if (animTimer &gt; wait_time)
        {
            animTimer = 0;
            phase = 0;
        }
    }
    else
    {
        if (abs(animTimer - 2 * at) &lt; 2 * at)
            image_index = 2;
        if (abs(animTimer - 2 * at) &lt; at)
            image_index = 3;
        if (animTimer == 2 * at)
        {
            // create projectile
            // TODO: this sound is inaccurate
            playSFX(sfxCannonShoot);
            with (instance_create(x + 8, y - 16, objArigockGSpike))
            {
                yspeed = other.high_shot_yspeed;
                if (other.phase == 1 || other.phase == other.volley_n)
                    yspeed = other.low_shot_yspeed;
                xspeed = (1 - 2 * (other.phase mod 2)) * other.shot_xspeed;
            }
        }
        
        // volley
        if (animTimer &gt; shoot_time)
        {
            animTimer = 0;
            phase += 1;
        }
    }
    
    animTimer++;
}
else if (dead)
{
    animTimer = 0;
    phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
{
    exit;
}

if (iFrames == 1 || iFrames == 3)
{
    d3d_set_fog(true, c_white, 0, 0);
}

image_blend = color;
drawSelf();

image_blend = c_white;

image_index += 3;

drawSelf();

image_index -= 3;

image_blend = color;

d3d_set_fog(false, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
